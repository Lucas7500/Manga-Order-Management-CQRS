// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoRabbitMQ.Infrastructure;

#nullable disable

namespace ProjetoRabbitMQ.Migrations
{
    [DbContext(typeof(MySqlContext))]
    partial class MySqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ProjetoRabbitMQ.Models.Joins.UserMangaEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("user_mangas", (string)null);
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.Manga.MangaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Aliases")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("aliases");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("genres");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int unsigned")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("mangas", (string)null);
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.MangaOrder.MangaOrderEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(26)")
                        .HasColumnName("id");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("longtext")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.MangaOrder.MangaOrderItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(26)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.HasIndex("OrderId");

                    b.ToTable("ordered_items", (string)null);
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.User.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)")
                        .HasColumnName("email");

                    b.Property<Guid?>("MangaEntityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("MangaEntityId");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "",
                            Name = "admin",
                            PasswordHash = "admin",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.Joins.UserMangaEntity", b =>
                {
                    b.HasOne("ProjetoRabbitMQ.Models.Manga.MangaEntity", "Manga")
                        .WithMany("UserMangas")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoRabbitMQ.Models.User.UserEntity", "User")
                        .WithMany("UserMangas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.MangaOrder.MangaOrderEntity", b =>
                {
                    b.HasOne("ProjetoRabbitMQ.Models.User.UserEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.MangaOrder.MangaOrderItemEntity", b =>
                {
                    b.HasOne("ProjetoRabbitMQ.Models.Manga.MangaEntity", "OrderedManga")
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoRabbitMQ.Models.MangaOrder.MangaOrderEntity", "Order")
                        .WithMany("OrderedMangas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderedManga");
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.User.UserEntity", b =>
                {
                    b.HasOne("ProjetoRabbitMQ.Models.Manga.MangaEntity", null)
                        .WithMany("Users")
                        .HasForeignKey("MangaEntityId");
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.Manga.MangaEntity", b =>
                {
                    b.Navigation("UserMangas");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.MangaOrder.MangaOrderEntity", b =>
                {
                    b.Navigation("OrderedMangas");
                });

            modelBuilder.Entity("ProjetoRabbitMQ.Models.User.UserEntity", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserMangas");
                });
#pragma warning restore 612, 618
        }
    }
}
